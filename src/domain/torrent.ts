import express from "express";
import tar from "tar-stream";
import zlib from "zlib";

/**
 * Torrent entry.
 */
export interface Entry {
	id: number,
	leechers: number,
	magnet: string,
	page: string,
	seeders: number,
	size: number,
	title: string,
	torrent: string
}

/**
 * Create DLM search plugin for Synology.
 * See: https://global.download.synology.com/download/Document/Software/DeveloperGuide/Package/DownloadStation/All/enu/DLM_Guide.pdf
 */
export function createSynologyPlugin(name: string, endpoint: string, response: express.Response): Promise<void> {
	const className = `SynoDLMSearch_Apizer_${name}`;
	const pack = tar.pack();

	pack.entry({ name: 'INFO' }, JSON.stringify({
		name: name,
		displayname: `${name} Apizer Plugin`,
		description: `Search plugin for ${name} generated by Apizer`,
		version: "1.0",
		site: "https://github.com/r3c/apizer",
		module: "search.php",
		type: "search",
		class: className
	}, null, "\t"));

	pack.entry({ name: 'search.php' }, `<?php
class ${className} {
	public function __construct() {
	}

	public function prepare($curl, $query) {
		curl_setopt($curl, CURLOPT_URL, 'https://apizer.herokuapp.com/${endpoint}' . rawurlencode($query));
	}

	public function parse($plugin, $response) {
		$results = json_decode($response, true);

		if (!is_array($results)) {
			return;
		}

		foreach ($results as $result) {
			if (!isset($result['magnet'])) {
				continue;
			}

			$created = isset($result['created']) ? (string)$result['created'] : date('Y-m-d G:i:s');
			$leechers = isset($result['leechers']) ? (int)$result['leechers'] : 0;
			$magnet = (string)$result['magnet'];
			$page = isset($result['page']) ? (string)$result['page'] : '';
			$seeders = isset($result['seeders']) ? (int)$result['seeders'] : 0;
			$size = isset($result['size']) ? (float)$result['size'] : 0;
			$title = isset($result['title']) ? (string)$result['title'] : 'No title';

			$plugin->addResult($title, $magnet, $size, $created, $page, '', $seeders, $leechers, '');
		}
	}
}
`);

	response.setHeader("Content-Disposition", `attachment; filename="${name}-Synology-Plugin.dlm"`);
	response.setHeader("Content-Type", "application/octet-stream");

	// Piping `pack` into gzip behaves in a weird way, so we're reading byte
	// contents manually and feeding it to gzip instead.
	const buffer = pack.read();

	return new Promise((resolve, reject) => {
		zlib.gzip(buffer, (error, buffer) => {
			if (error) {
				reject(error);

				return;
			}

			response.write(buffer);

			resolve();
		});
	});
}